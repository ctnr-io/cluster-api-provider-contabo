#cloud-config
package_update: true

write_files:
  - path: /usr/local/bin/contabo-network-cleanup.sh
    owner: 'root:root'
    permissions: '0755'
    content: |
      #!/bin/sh
      ip route \
        | grep -v default \
        | grep -v '${PRIVATE_NETWORK_CIDR}' \
        | cut -d' ' -f1 \
        | xargs -r -n1 sudo ip route del
  - path: /etc/systemd/system/contabo-network-cleanup.service
    owner: 'root:root'
    permissions: '0644'
    content: |
      [Unit]
      Description=Cleanup bad network routes
      After=network.target
  
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/contabo-network-cleanup.sh
  
      [Install]
      WantedBy=multi-user.target
  - path: /etc/modules-load.d/k8s.conf
    owner: 'root:root'
    permissions: '0644'
    content: |
      overlay
      br_netfilter
  - path: /etc/sysctl.d/k8s.conf
    owner: 'root:root'
    permissions: '0644'
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      net.ipv6.conf.all.forwarding = 1

packages:
  - sudo
  - ca-certificates
  - curl
  - gnupg
  - etcd-client
  - apt-transport-https
  - gpg

runcmd:
  - |
    #!/bin/sh
    # Remove unused network subnet configuration from contabo at boot time
    sudo mkdir -p /usr/local/bin
    sudo systemctl daemon-reload
    sudo systemctl enable contabo-network-cleanup.service
    sudo systemctl start contabo-network-cleanup.service
  
  - |
    # Add Docker's official GPG key
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo rm -rf /etc/apt/keyrings/docker.gpg
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --batch --no-tty -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
  
  - |
    # Add the repository to Apt sources
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    curl -fsSL https://gvisor.dev/archive.key | sudo apt-key add -  
    sudo add-apt-repository "deb [arch=amd64] https://storage.googleapis.com/gvisor/releases release main"  
  
  - |
    # Update apt and install containerd & runsc
    export DEBIAN_FRONTEND=noninteractive
    sudo apt-get update
    sudo apt-get install -y containerd.io runsc
  
  - |
    # Configure containerd for Kubernetes
    sudo mkdir -p /etc/containerd
    containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
  
  - |
    # Set SystemdCgroup to true for containerd
    sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
  
  - |
    # Enable containerd service
    sudo systemctl enable containerd
  
  - |
    # Restart containerd
    sudo systemctl restart containerd
  
  - |
    # Update sysctl settings
    sudo sysctl --system
  
  - |
    # Add gvisor's official GPG key and 
    curl -fsSL https://gvisor.dev/archive.key | sudo gpg --dearmor -o /usr/share/keyrings/gvisor-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/gvisor-archive-keyring.gpg] https://storage.googleapis.com/gvisor/releases release main" | sudo tee /etc/apt/sources.list.d/gvisor.list > /dev/null
    sudo apt-get update && sudo apt-get install -y runsc
  
  - |
    cat <<EOF | sudo tee /etc/containerd/config.toml
    version = 2
    [plugins."io.containerd.runtime.v1.linux"]
      shim_debug = true
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
      runtime_type = "io.containerd.runc.v2"
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runsc]
      runtime_type = "io.containerd.runsc.v1"
    EOF
  
  - |
    export DEBIAN_FRONTEND=noninteractive
    # 1. Update the apt package index and install packages needed to use the Kubernetes apt repository:
    sudo apt-get update
    # apt-transport-https may be a dummy package; if so, you can skip that package
    sudo apt-get install -y apt-transport-https ca-certificates curl gpg
  
  - |
    # 2. Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:
    # If the directory '/etc/apt/keyrings' does not exist, it should be created before the curl command, read the note below.
    sudo mkdir -p -m 755 /etc/apt/keyrings
    sudo rm -rf /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    curl -fsSL https://pkgs.k8s.io/core:/stable:/${KUBEADM_VERSION}/deb/Release.key | sudo gpg --dearmor --batch --no-tty -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  
  - |
    # 3. Add the appropriate Kubernetes apt repository.
    # Please note that this repository have packages only for Kubernetes ${KUBEADM_VERSION};
    # for other Kubernetes minor versions,
    # you need to change the Kubernetes minor version in the URL to match your desired minor version
    # (you should also check that you are reading the documentation for the version of Kubernetes that you plan to install).
    # This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${KUBEADM_VERSION}/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  
  - |
    export DEBIAN_FRONTEND=noninteractive
    # 4. Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version:
    sudo apt-get update
    sudo apt-get install -y kubelet kubeadm kubectl
    sudo apt-mark hold kubelet kubeadm kubectl
  
  - |
    # 5. (Optional) Enable the kubelet service before running kubeadm:
    sudo systemctl enable --now kubelet